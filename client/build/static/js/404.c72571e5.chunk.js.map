{"version":3,"file":"static/js/404.c72571e5.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/CalendarToday.js","../node_modules/@mui/icons-material/esm/ArrowUpward.js","../node_modules/@mui/icons-material/esm/SwapHoriz.js","../node_modules/@mui/icons-material/esm/Payment.js","../node_modules/@mui/icons-material/esm/AccountBalanceWallet.js","../node_modules/@mui/icons-material/esm/SortByAlpha.js","pages/Transactions/Transactions.jsx","../node_modules/date-fns/esm/subDays/index.js","../node_modules/@mui/icons-material/esm/AccountBalance.js","../node_modules/@mui/icons-material/esm/ArrowDownward.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 18H4V8h16z\"\n}), 'CalendarToday');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8z\"\n}), 'ArrowUpward');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6.99 11 3 15l3.99 4v-3H14v-2H6.99zM21 9l-3.99-4v3H10v2h7.01v3z\"\n}), 'SwapHoriz');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2m0 14H4v-6h16zm0-10H4V6h16z\"\n}), 'Payment');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2zm-9-2h10V8H12zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5\"\n}), 'AccountBalanceWallet');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14.94 4.66h-4.72l2.36-2.36zm-4.69 14.71h4.66l-2.33 2.33zM6.1 6.27 1.6 17.73h1.84l.92-2.45h5.11l.92 2.45h1.84L7.74 6.27zm-1.13 7.37 1.94-5.18 1.94 5.18zm10.76 2.5h6.12v1.59h-8.53v-1.29l5.92-8.56h-5.88v-1.6h8.3v1.26z\"\n}), 'SortByAlpha');","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  CircularProgress,\r\n  TablePagination,\r\n  InputAdornment,\r\n  Alert,\r\n  Chip,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Slide,\r\n  Avatar,\r\n  Fab,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Collapse,\r\n  Tabs,\r\n  Tab,\r\n  Stack,\r\n  LinearProgress,\r\n  Badge,\r\n  Tooltip,\r\n  SwipeableDrawer\r\n} from '@mui/material';\r\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as VisibilityIcon,\r\n  Check as CheckIcon,\r\n  Close as CloseIcon,\r\n  MonetizationOn as MoneyIcon,\r\n  Payment as PaymentIcon,\r\n  SwapHoriz as TransferIcon,\r\n  ArrowUpward as IncomeIcon,\r\n  ArrowDownward as ExpenseIcon,\r\n  FilterList as FilterIcon,\r\n  Search as SearchIcon,\r\n  AccountBalance as AccountBalanceIcon,\r\n  SortByAlpha as SortIcon,\r\n  CalendarToday as CalendarIcon,\r\n  MoreVert as MoreIcon,\r\n  AccountBalanceWallet as WalletIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  FilterAlt as FilterAltIcon,\r\n  Save as SaveIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport axios from 'axios';\r\nimport { format, subDays, startOfMonth, endOfMonth, isWithinInterval } from 'date-fns';\r\n// Import restored when needed for user authentication\r\n// import { AuthContext } from '../../context/AuthContext';\r\n\r\n// Transition component for dialogs\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Transactions() {\r\n  // Removed unused context\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  \r\n  // Transaction form state\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [dialogMode, setDialogMode] = useState('add'); // 'add', 'edit', 'view'\r\n  const [currentTransaction, setCurrentTransaction] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    type: 'expense',\r\n    amount: '',\r\n    description: '',\r\n    category: '',\r\n    date: new Date(),\r\n    account: 'main',\r\n    notes: '',\r\n    isAsset: false,\r\n    assetDepreciationRate: 0\r\n  });\r\n  \r\n  // Delete confirmation\r\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\r\n  const [transactionToDelete, setTransactionToDelete] = useState(null);\r\n\r\n  // Search and filter states\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [filterAccount, setFilterAccount] = useState('all');\r\n  const [filterCategory, setFilterCategory] = useState('all');\r\n  const [filterDateRange, setFilterDateRange] = useState('all'); // 'all', 'thisMonth', 'lastMonth', 'custom'\r\n  const [filterStartDate, setFilterStartDate] = useState(subDays(new Date(), 30));\r\n  const [filterEndDate, setFilterEndDate] = useState(new Date());\r\n  \r\n  // Mobile filter drawer\r\n  const [filterDrawerOpen, setFilterDrawerOpen] = useState(false);\r\n  \r\n  // Tab state for mobile view\r\n  const [tabValue, setTabValue] = useState(0);\r\n  \r\n  // Sort state\r\n  const [sortBy, setSortBy] = useState('date');\r\n  const [sortDirection, setSortDirection] = useState('desc');\r\n\r\n  // Theme and responsive design\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));\r\n\r\n  // Load transactions on component mount\r\n  useEffect(() => {\r\n    loadTransactions();\r\n  }, []);\r\n\r\n  // Fetch transactions from API\r\n  const loadTransactions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await axios.get('/api/v1/transactions');\r\n      setTransactions(res.data);\r\n      setError('');\r\n    } catch (err) {\r\n      setError('Failed to load transactions. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Handle dialog opening for adding a new transaction\r\n  const handleAddClick = () => {\r\n    setDialogMode('add');\r\n    setCurrentTransaction(null);\r\n    setFormData({\r\n      type: 'expense',\r\n      amount: '',\r\n      description: '',\r\n      category: '',\r\n      date: new Date(),\r\n      account: 'main',\r\n      notes: '',\r\n      isAsset: false,\r\n      assetDepreciationRate: 0\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n  \r\n  // Handle dialog opening for editing an existing transaction\r\n  const handleEditClick = (transaction) => {\r\n    setDialogMode('edit');\r\n    setCurrentTransaction(transaction);\r\n    setFormData({\r\n      type: transaction.type || 'expense',\r\n      amount: transaction.amount || '',\r\n      description: transaction.description || '',\r\n      category: transaction.category || '',\r\n      date: transaction.date ? new Date(transaction.date) : new Date(),\r\n      account: transaction.account || 'main',\r\n      notes: transaction.notes || '',\r\n      isAsset: transaction.isAsset || false,\r\n      assetDepreciationRate: transaction.assetDepreciationRate || 0\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n  \r\n  // Handle dialog opening for viewing transaction details\r\n  const handleViewClick = (transaction) => {\r\n    setDialogMode('view');\r\n    setCurrentTransaction(transaction);\r\n    setFormData({\r\n      type: transaction.type || 'expense',\r\n      amount: transaction.amount || '',\r\n      description: transaction.description || '',\r\n      category: transaction.category || '',\r\n      date: transaction.date ? new Date(transaction.date) : new Date(),\r\n      account: transaction.account || 'main',\r\n      notes: transaction.notes || '',\r\n      isAsset: transaction.isAsset || false,\r\n      assetDepreciationRate: transaction.assetDepreciationRate || 0\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n  \r\n  // Handle dialog close\r\n  const handleDialogClose = () => {\r\n    setOpenDialog(false);\r\n  };\r\n  \r\n  // Handle form input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prevState => ({\r\n      ...prevState,\r\n      [name]: value\r\n    }));\r\n  };\r\n  \r\n  // Handle date change\r\n  const handleDateChange = (newDate) => {\r\n    setFormData(prevState => ({\r\n      ...prevState,\r\n      date: newDate\r\n    }));\r\n  };\r\n  \r\n  // Handle form submission\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (dialogMode === 'add') {\r\n        // Simulated API call to add a transaction\r\n        const res = await axios.post('/api/v1/transactions', formData);\r\n        setTransactions(prevTransactions => [...prevTransactions, res.data]);\r\n      } else if (dialogMode === 'edit') {\r\n        // Simulated API call to update a transaction\r\n        const res = await axios.put(`/api/v1/transactions/${currentTransaction._id}`, formData);\r\n        setTransactions(prevTransactions => \r\n          prevTransactions.map(t => t._id === currentTransaction._id ? res.data : t)\r\n        );\r\n      }\r\n      \r\n      setOpenDialog(false);\r\n    } catch (err) {\r\n      console.error('Error saving transaction:', err);\r\n      // Handle error (e.g., show error message)\r\n    }\r\n  };\r\n  \r\n  // Handle delete click\r\n  const handleDeleteClick = (transaction) => {\r\n    setTransactionToDelete(transaction);\r\n    setOpenDeleteDialog(true);\r\n  };\r\n  \r\n  // Handle delete dialog close\r\n  const handleDeleteDialogClose = () => {\r\n    setOpenDeleteDialog(false);\r\n    setTransactionToDelete(null);\r\n  };\r\n  \r\n  // Handle delete confirmation\r\n  const handleDeleteConfirm = async () => {\r\n    try {\r\n      // Simulated API call to delete a transaction\r\n      await axios.delete(`/api/v1/transactions/${transactionToDelete._id}`);\r\n      setTransactions(prevTransactions => \r\n        prevTransactions.filter(t => t._id !== transactionToDelete._id)\r\n      );\r\n      setOpenDeleteDialog(false);\r\n      setTransactionToDelete(null);\r\n    } catch (err) {\r\n      console.error('Error deleting transaction:', err);\r\n      // Handle error (e.g., show error message)\r\n    }\r\n  };\r\n  \r\n  // Handle pagination\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  \r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Format date for display\r\n  const formatDate = (dateString) => {\r\n    try {\r\n      return format(new Date(dateString), 'dd MMM yyyy');\r\n    } catch (error) {\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  // Format amount with Malaysian Ringgit (MYR)\r\n  const formatCurrency = (amount) => {\r\n    if (amount === undefined || amount === null) return '-';\r\n    return new Intl.NumberFormat('ms-MY', {\r\n      style: 'currency',\r\n      currency: 'MYR',\r\n      minimumFractionDigits: 2\r\n    }).format(amount);\r\n  };\r\n\r\n  // Get an icon for the transaction type\r\n  const getTypeIcon = (type) => {\r\n    switch (type) {\r\n      case 'income':\r\n        return <IncomeIcon sx={{ color: theme.palette.success.main }} />;\r\n      case 'expense':\r\n        return <ExpenseIcon sx={{ color: theme.palette.error.main }} />;\r\n      case 'transfer':\r\n        return <TransferIcon sx={{ color: theme.palette.info.main }} />;\r\n      case 'investment':\r\n        return <AccountBalanceIcon sx={{ color: theme.palette.warning.main }} />;\r\n      default:\r\n        return <MoneyIcon />;\r\n    }\r\n  };\r\n\r\n  // Get a color for the transaction type chip\r\n  const getTypeColor = (type) => {\r\n    switch (type) {\r\n      case 'income':\r\n        return 'success';\r\n      case 'expense':\r\n        return 'error';\r\n      case 'transfer':\r\n        return 'info';\r\n      case 'investment':\r\n        return 'warning';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  // Get a color for the account chip\r\n  const getAccountColor = (account) => {\r\n    switch (account) {\r\n      case 'main':\r\n        return 'primary';\r\n      case 'savings':\r\n        return 'success';\r\n      case 'investment':\r\n        return 'warning';\r\n      case 'petty-cash':\r\n        return 'secondary';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  // Get account icon\r\n  const getAccountIcon = (account) => {\r\n    switch (account) {\r\n      case 'savings':\r\n        return <AccountBalanceIcon />;\r\n      case 'investment':\r\n        return <AccountBalanceIcon />;\r\n      case 'petty-cash':\r\n        return <PaymentIcon />;\r\n      default:\r\n        return <WalletIcon />;\r\n    }\r\n  };\r\n\r\n  // Calculate summary statistics\r\n  const calculateSummary = () => {\r\n    const thisMonth = {\r\n      start: startOfMonth(new Date()),\r\n      end: endOfMonth(new Date())\r\n    };\r\n\r\n    const summary = {\r\n      totalIncome: 0,\r\n      totalExpense: 0,\r\n      totalTransfer: 0,\r\n      totalInvestment: 0,\r\n      thisMonthIncome: 0,\r\n      thisMonthExpense: 0,\r\n      accountBalances: {\r\n        main: 0,\r\n        savings: 0,\r\n        investment: 0,\r\n        'petty-cash': 0\r\n      }\r\n    };\r\n\r\n    transactions.forEach(transaction => {\r\n      const amount = parseFloat(transaction.amount);\r\n      const date = new Date(transaction.date);\r\n      const isThisMonth = isWithinInterval(date, { \r\n        start: thisMonth.start, \r\n        end: thisMonth.end \r\n      });\r\n\r\n      // Calculate total by type\r\n      if (transaction.type === 'income') {\r\n        summary.totalIncome += amount;\r\n        if (isThisMonth) summary.thisMonthIncome += amount;\r\n        summary.accountBalances[transaction.account] += amount;\r\n      } else if (transaction.type === 'expense') {\r\n        summary.totalExpense += amount;\r\n        if (isThisMonth) summary.thisMonthExpense += amount;\r\n        summary.accountBalances[transaction.account] -= amount;\r\n      } else if (transaction.type === 'transfer') {\r\n        summary.totalTransfer += amount;\r\n        // For transfers, we would need to know source and destination accounts\r\n        // This is simplified\r\n      } else if (transaction.type === 'investment') {\r\n        summary.totalInvestment += amount;\r\n        // Investment can be more complex, but we're simplifying\r\n      }\r\n    });\r\n\r\n    return summary;\r\n  };\r\n\r\n  // Filter transactions based on search and filters\r\n  const filterTransactions = () => {\r\n    return transactions.filter(transaction => {\r\n      // Search term filter\r\n      const matchesSearch = searchTerm === '' || (\r\n        (transaction.description && transaction.description.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n        (transaction.notes && transaction.notes.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n        (transaction.category && transaction.category.toLowerCase().includes(searchTerm.toLowerCase()))\r\n      );\r\n\r\n      // Type filter\r\n      const matchesType = filterType === 'all' || transaction.type === filterType;\r\n\r\n      // Account filter\r\n      const matchesAccount = filterAccount === 'all' || transaction.account === filterAccount;\r\n\r\n      // Category filter\r\n      const matchesCategory = filterCategory === 'all' || transaction.category === filterCategory;\r\n\r\n      // Date range filter\r\n      let matchesDateRange = true;\r\n      if (filterDateRange !== 'all') {\r\n        const transactionDate = new Date(transaction.date);\r\n        \r\n        if (filterDateRange === 'thisMonth') {\r\n          const thisMonthStart = startOfMonth(new Date());\r\n          const thisMonthEnd = endOfMonth(new Date());\r\n          matchesDateRange = isWithinInterval(transactionDate, { \r\n            start: thisMonthStart, \r\n            end: thisMonthEnd \r\n          });\r\n        } else if (filterDateRange === 'lastMonth') {\r\n          const lastMonth = new Date();\r\n          lastMonth.setMonth(lastMonth.getMonth() - 1);\r\n          const lastMonthStart = startOfMonth(lastMonth);\r\n          const lastMonthEnd = endOfMonth(lastMonth);\r\n          matchesDateRange = isWithinInterval(transactionDate, { \r\n            start: lastMonthStart, \r\n            end: lastMonthEnd \r\n          });\r\n        } else if (filterDateRange === 'custom') {\r\n          matchesDateRange = isWithinInterval(transactionDate, { \r\n            start: filterStartDate, \r\n            end: filterEndDate \r\n          });\r\n        }\r\n      }\r\n\r\n      return matchesSearch && matchesType && matchesAccount && matchesCategory && matchesDateRange;\r\n    });\r\n  };\r\n\r\n  // Sort transactions\r\n  const sortTransactions = (filteredTransactions) => {\r\n    return [...filteredTransactions].sort((a, b) => {\r\n      if (sortBy === 'date') {\r\n        const dateA = new Date(a.date);\r\n        const dateB = new Date(b.date);\r\n        return sortDirection === 'asc' ? dateA - dateB : dateB - dateA;\r\n      } else if (sortBy === 'amount') {\r\n        return sortDirection === 'asc' ? a.amount - b.amount : b.amount - a.amount;\r\n      } else if (sortBy === 'description') {\r\n        const descA = a.description.toLowerCase();\r\n        const descB = b.description.toLowerCase();\r\n        return sortDirection === 'asc' \r\n          ? descA.localeCompare(descB) \r\n          : descB.localeCompare(descA);\r\n      }\r\n      return 0;\r\n    });\r\n  };\r\n\r\n  // Get the appropriate category options based on transaction type\r\n  const getCategoryOptions = () => {\r\n    if (formData.type === 'expense') {\r\n      return [\r\n        'Phone',\r\n        'Rental',\r\n        'Salary',\r\n        'Accessories',\r\n        'Marketing',\r\n        'Transport',\r\n        'Courier',\r\n        'Bonus',\r\n        'Advertisement',\r\n        'Other'\r\n      ];\r\n    } else if (formData.type === 'income') {\r\n      return ['Sales', 'Services', 'Investments', 'Grants', 'Royalties', 'Interest', 'Other'];\r\n    } else if (formData.type === 'transfer') {\r\n      return ['Internal Transfer', 'External Transfer', 'Other'];\r\n    } else {\r\n      return ['Equity', 'Debt', 'Convertible', 'Other'];\r\n    }\r\n  };\r\n\r\n  // Check if a category can be considered an asset\r\n  const canBeAsset = (category) => {\r\n    // Categories that can be considered assets if not sold/used up\r\n    return ['Phone', 'Accessories', 'Marketing', 'Transport', 'Other'].includes(category);\r\n  };\r\n\r\n  // Add this function to handle asset checkbox toggle\r\n  const handleAssetToggle = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      isAsset: e.target.checked\r\n    });\r\n  };\r\n\r\n  // Enhance UI with loader\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ \r\n        display: 'flex', \r\n        flexDirection: 'column',\r\n        alignItems: 'center', \r\n        justifyContent: 'center', \r\n        height: '80vh',\r\n        p: 3\r\n      }}>\r\n        <CircularProgress \r\n          size={isMobile ? 40 : 60} \r\n          thickness={4} \r\n          sx={{ \r\n            mb: 2,\r\n            color: theme.palette.primary.main\r\n          }} \r\n        />\r\n        <Typography variant=\"h6\" color=\"text.secondary\" align=\"center\">\r\n          Loading transactions...\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ mt: 1, maxWidth: 300 }}>\r\n          Preparing your financial data for display\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Enhanced error UI\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ p: 3 }}>\r\n        <Paper \r\n          elevation={2} \r\n          sx={{ \r\n            p: 3, \r\n            borderRadius: 4,\r\n            bgcolor: 'error.light',\r\n            color: 'error.contrastText'\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n            <Avatar sx={{ bgcolor: 'error.main', mr: 2 }}>\r\n              <CloseIcon />\r\n            </Avatar>\r\n            <Typography variant=\"h6\">\r\n              Error Loading Data\r\n            </Typography>\r\n          </Box>\r\n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\r\n            {error}\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            sx={{ \r\n              borderRadius: 8,\r\n              bgcolor: 'white',\r\n              color: 'error.main',\r\n              '&:hover': {\r\n                bgcolor: 'rgba(255,255,255,0.9)',\r\n              }\r\n            }}\r\n            onClick={loadTransactions}\r\n            startIcon={<RefreshIcon />}\r\n          >\r\n            Try Again\r\n          </Button>\r\n        </Paper>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Get filtered and sorted transactions\r\n  const filteredTransactions = filterTransactions();\r\n  const sortedTransactions = sortTransactions(filteredTransactions);\r\n  const paginatedTransactions = sortedTransactions.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  // Calculate summary statistics\r\n  const summary = calculateSummary();\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Box sx={{ pb: isMobile ? 7 : 3 }}>\r\n        {/* Header */}\r\n        <Box \r\n          sx={{ \r\n            pt: isMobile ? 2 : 3, \r\n            pb: 2,\r\n            px: isMobile ? 2 : 3,\r\n            background: theme.palette.mode === 'dark' \r\n              ? `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.secondary.dark})` \r\n              : `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,\r\n            borderRadius: isMobile ? '0 0 24px 24px' : '0 0 16px 16px',\r\n            mb: 2,\r\n            boxShadow: '0 4px 20px rgba(0,0,0,0.1)'\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: isMobile ? 1 : 2 }}>\r\n            <Typography \r\n              variant={isMobile ? \"h5\" : \"h4\"} \r\n              sx={{ \r\n                fontWeight: 600,\r\n                color: '#ffffff'\r\n              }}\r\n            >\r\n              Transactions\r\n            </Typography>\r\n            {!isMobile && (\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleAddClick}\r\n                sx={{ \r\n                  borderRadius: 8,\r\n                  px: 3,\r\n                  py: 1,\r\n                  bgcolor: 'white',\r\n                  color: theme.palette.primary.main,\r\n                  '&:hover': {\r\n                    bgcolor: 'rgba(255,255,255,0.9)',\r\n                  },\r\n                  boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\r\n                }}\r\n              >\r\n                Add Transaction\r\n              </Button>\r\n            )}\r\n          </Box>\r\n\r\n          {/* Summary Cards - For desktop and tablet */}\r\n          {!isMobile && (\r\n            <Grid container spacing={2} sx={{ mt: 1 }}>\r\n              <Grid item xs={12} md={3}>\r\n                <Paper \r\n                  elevation={2}\r\n                  sx={{ \r\n                    p: 2, \r\n                    borderRadius: 4,\r\n                    bgcolor: 'rgba(255,255,255,0.9)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\r\n                  }}\r\n                >\r\n                  <Avatar sx={{ bgcolor: theme.palette.success.main, mr: 2 }}>\r\n                    <IncomeIcon />\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Income</Typography>\r\n                    <Typography variant=\"h6\" color=\"success.main\" sx={{ fontWeight: 'bold' }}>\r\n                      {formatCurrency(summary.totalIncome)}\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <Paper \r\n                  elevation={2}\r\n                  sx={{ \r\n                    p: 2, \r\n                    borderRadius: 4,\r\n                    bgcolor: 'rgba(255,255,255,0.9)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    backdropFilter: 'blur(10px)',\r\n                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\r\n                  }}\r\n                >\r\n                  <Avatar sx={{ bgcolor: theme.palette.error.main, mr: 2 }}>\r\n                    <ExpenseIcon />\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Total Expenses</Typography>\r\n                    <Typography variant=\"h6\" color=\"error.main\" sx={{ fontWeight: 'bold' }}>\r\n                      {formatCurrency(summary.totalExpense)}\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <Paper \r\n                  elevation={2}\r\n                  sx={{ \r\n                    p: 2, \r\n                    borderRadius: 4,\r\n                    bgcolor: 'rgba(255,255,255,0.9)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    cursor: 'pointer',\r\n                    backdropFilter: 'blur(10px)',\r\n                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n                    transition: 'transform 0.2s',\r\n                    '&:hover': {\r\n                      transform: 'translateY(-2px)'\r\n                    }\r\n                  }}\r\n                  onClick={() => setFilterDateRange(filterDateRange === 'thisMonth' ? 'all' : 'thisMonth')}\r\n                >\r\n                  <Avatar sx={{ bgcolor: theme.palette.primary.main, mr: 2 }}>\r\n                    <CalendarIcon />\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">This Month</Typography>\r\n                    <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                      {formatCurrency(summary.thisMonthIncome - summary.thisMonthExpense)}\r\n                    </Typography>\r\n                  </Box>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Mobile summary */}\r\n        {isMobile && (\r\n          <Box sx={{ px: 2, mb: 2 }}>\r\n            <Paper \r\n              elevation={2}\r\n              sx={{ \r\n                p: 2, \r\n                borderRadius: 4,\r\n                overflow: 'hidden',\r\n                boxShadow: '0 2px 10px rgba(0,0,0,0.08)'\r\n              }}\r\n            >\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Avatar \r\n                      sx={{ \r\n                        bgcolor: theme.palette.success.main, \r\n                        width: 24, \r\n                        height: 24,\r\n                        mr: 1\r\n                      }}\r\n                    >\r\n                      <IncomeIcon sx={{ fontSize: 14 }} />\r\n                    </Avatar>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Income</Typography>\r\n                  </Box>\r\n                  <Typography variant=\"h6\" color=\"success.main\" sx={{ fontWeight: 'bold', mt: 0.5 }}>\r\n                    {formatCurrency(summary.totalIncome)}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Avatar \r\n                      sx={{ \r\n                        bgcolor: theme.palette.error.main, \r\n                        width: 24, \r\n                        height: 24,\r\n                        mr: 1\r\n                      }}\r\n                    >\r\n                      <ExpenseIcon sx={{ fontSize: 14 }} />\r\n                    </Avatar>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Expenses</Typography>\r\n                  </Box>\r\n                  <Typography variant=\"h6\" color=\"error.main\" sx={{ fontWeight: 'bold', mt: 0.5 }}>\r\n                    {formatCurrency(summary.totalExpense)}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Divider sx={{ my: 1 }} />\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">Balance</Typography>\r\n                  <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                    {formatCurrency(summary.totalIncome - summary.totalExpense)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Search and filter tools */}\r\n        <Box sx={{ px: isMobile ? 2 : 3, mb: 2 }}>\r\n          <Paper sx={{ p: 2, borderRadius: 4, boxShadow: '0 2px 10px rgba(0,0,0,0.08)' }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n              <TextField\r\n                placeholder=\"Search transactions...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                size={isMobile ? \"small\" : \"medium\"}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                  sx: { borderRadius: 8 }\r\n                }}\r\n              />\r\n              {!isMobile && (\r\n                <Button\r\n                  startIcon={<FilterAltIcon />}\r\n                  variant=\"outlined\"\r\n                  sx={{ \r\n                    ml: 2, \r\n                    borderRadius: 8, \r\n                    whiteSpace: 'nowrap',\r\n                    borderColor: filterType !== 'all' || filterAccount !== 'all' || filterDateRange !== 'all' \r\n                      ? theme.palette.primary.main \r\n                      : undefined,\r\n                    bgcolor: filterType !== 'all' || filterAccount !== 'all' || filterDateRange !== 'all'\r\n                      ? 'rgba(25, 118, 210, 0.08)'\r\n                      : undefined\r\n                  }}\r\n                  onClick={() => setFilterDrawerOpen(true)}\r\n                >\r\n                  {filterType !== 'all' || filterAccount !== 'all' || filterDateRange !== 'all' \r\n                    ? 'Filters Applied' \r\n                    : 'Filters'}\r\n                </Button>\r\n              )}\r\n              {!isMobile && (\r\n                <Button\r\n                  startIcon={<SortIcon />}\r\n                  variant=\"outlined\"\r\n                  sx={{ ml: 2, borderRadius: 8, whiteSpace: 'nowrap' }}\r\n                  onClick={() => {\r\n                    if (sortBy === 'date') {\r\n                      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n                    } else {\r\n                      setSortBy('date');\r\n                      setSortDirection('desc');\r\n                    }\r\n                  }}\r\n                >\r\n                  {sortBy === 'date' && sortDirection === 'desc' ? 'Newest' : 'Oldest'}\r\n                </Button>\r\n              )}\r\n            </Box>\r\n\r\n            {/* Quick filter chips */}\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              <Chip \r\n                label=\"All\"\r\n                color={filterType === 'all' ? 'primary' : 'default'}\r\n                onClick={() => setFilterType('all')}\r\n                sx={{ borderRadius: 8 }}\r\n              />\r\n              <Chip \r\n                label=\"Income\"\r\n                color={filterType === 'income' ? 'success' : 'default'}\r\n                onClick={() => setFilterType('income')}\r\n                icon={<IncomeIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              />\r\n              <Chip \r\n                label=\"Expense\"\r\n                color={filterType === 'expense' ? 'error' : 'default'}\r\n                onClick={() => setFilterType('expense')}\r\n                icon={<ExpenseIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              />\r\n              <Chip \r\n                label=\"Transfer\"\r\n                color={filterType === 'transfer' ? 'info' : 'default'}\r\n                onClick={() => setFilterType('transfer')}\r\n                icon={<TransferIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              />\r\n              <Chip \r\n                label=\"Investment\"\r\n                color={filterType === 'investment' ? 'warning' : 'default'}\r\n                onClick={() => setFilterType('investment')}\r\n                icon={<AccountBalanceIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n\r\n        {/* Mobile tabs */}\r\n        {isMobile && (\r\n          <Box sx={{ px: 2, mb: 2 }}>\r\n            <Tabs \r\n              value={tabValue} \r\n              onChange={(e, newValue) => {\r\n                setTabValue(newValue);\r\n                if (newValue === 0) setFilterType('all');\r\n                if (newValue === 1) setFilterType('income');\r\n                if (newValue === 2) setFilterType('expense');\r\n              }}\r\n              variant=\"fullWidth\"\r\n              sx={{\r\n                '& .MuiTabs-indicator': {\r\n                  backgroundColor: theme.palette.primary.main,\r\n                  height: 3,\r\n                  borderRadius: 1.5\r\n                }\r\n              }}\r\n            >\r\n              <Tab \r\n                label=\"All\" \r\n                sx={{ \r\n                  textTransform: 'none',\r\n                  fontWeight: tabValue === 0 ? 'bold' : 'normal'\r\n                }} \r\n              />\r\n              <Tab \r\n                label=\"Income\" \r\n                sx={{ \r\n                  textTransform: 'none',\r\n                  fontWeight: tabValue === 1 ? 'bold' : 'normal',\r\n                  color: tabValue === 1 ? theme.palette.success.main : 'inherit'\r\n                }} \r\n              />\r\n              <Tab \r\n                label=\"Expenses\" \r\n                sx={{ \r\n                  textTransform: 'none',\r\n                  fontWeight: tabValue === 2 ? 'bold' : 'normal',\r\n                  color: tabValue === 2 ? theme.palette.error.main : 'inherit'\r\n                }} \r\n              />\r\n            </Tabs>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Empty state */}\r\n        {paginatedTransactions.length === 0 && (\r\n          <Box sx={{ \r\n            p: 3, \r\n            display: 'flex', \r\n            flexDirection: 'column', \r\n            alignItems: 'center', \r\n            justifyContent: 'center',\r\n            minHeight: '200px'\r\n          }}>\r\n            <Avatar sx={{ \r\n              bgcolor: 'rgba(25, 118, 210, 0.08)', \r\n              width: 60, \r\n              height: 60,\r\n              mb: 2 \r\n            }}>\r\n              <MoneyIcon sx={{ color: theme.palette.primary.main, fontSize: 32 }} />\r\n            </Avatar>\r\n            <Typography variant=\"h6\" color=\"text.secondary\" align=\"center\" gutterBottom>\r\n              No transactions found\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ mb: 3, maxWidth: 300 }}>\r\n              {searchTerm || filterType !== 'all' || filterAccount !== 'all' || filterCategory !== 'all' || filterDateRange !== 'all' ? \r\n                'Try adjusting your filters to see more results' : \r\n                'Get started by adding your first transaction'}\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={handleAddClick}\r\n              sx={{ borderRadius: 8 }}\r\n            >\r\n              Add Transaction\r\n            </Button>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Transactions list for Mobile */}\r\n        {isMobile && paginatedTransactions.length > 0 && (\r\n          <Box sx={{ px: 2 }}>\r\n            {paginatedTransactions.map((transaction) => (\r\n              <Card \r\n                key={transaction._id}\r\n                sx={{ \r\n                  mb: 2, \r\n                  borderRadius: 4,\r\n                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n                  transition: 'transform 0.2s, box-shadow 0.2s',\r\n                  '&:active': {\r\n                    transform: 'scale(0.98)',\r\n                    boxShadow: '0 1px 4px rgba(0,0,0,0.1)'\r\n                  }\r\n                }}\r\n                onClick={() => handleViewClick(transaction)}\r\n              >\r\n                <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <Avatar \r\n                        sx={{ \r\n                          bgcolor: `${theme.palette[getTypeColor(transaction.type)].light}22`,\r\n                          color: theme.palette[getTypeColor(transaction.type)].main,\r\n                          width: 40,\r\n                          height: 40\r\n                        }}\r\n                      >\r\n                        {getTypeIcon(transaction.type)}\r\n                      </Avatar>\r\n                      <Box sx={{ ml: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\r\n                          {transaction.description}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {formatDate(transaction.date)} • {transaction.category}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                    <Typography \r\n                      variant=\"body1\" \r\n                      sx={{ \r\n                        fontWeight: 'bold',\r\n                        color: transaction.type === 'expense' ? theme.palette.error.main : \r\n                              transaction.type === 'income' ? theme.palette.success.main : \r\n                              theme.palette.text.primary\r\n                      }}\r\n                    >\r\n                      {transaction.type === 'expense' ? '-' : transaction.type === 'income' ? '+' : ''}\r\n                      {formatCurrency(transaction.amount)}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\r\n                    <Chip \r\n                      label={transaction.account}\r\n                      size=\"small\"\r\n                      color={getAccountColor(transaction.account)}\r\n                      variant=\"outlined\"\r\n                      sx={{ borderRadius: 8 }}\r\n                    />\r\n                    <Box>\r\n                      <IconButton \r\n                        size=\"small\" \r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          handleEditClick(transaction);\r\n                        }}\r\n                        sx={{ backgroundColor: 'rgba(25, 118, 210, 0.08)', mr: 1 }}\r\n                      >\r\n                        <EditIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                      <IconButton \r\n                        size=\"small\" \r\n                        color=\"error\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          handleDeleteClick(transaction);\r\n                        }}\r\n                        sx={{ backgroundColor: 'rgba(211, 47, 47, 0.08)' }}\r\n                      >\r\n                        <DeleteIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n            {filteredTransactions.length > rowsPerPage && (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={filteredTransactions.length}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  rowsPerPage={rowsPerPage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  labelRowsPerPage=\"\"\r\n                  rowsPerPageOptions={[5, 10, 25]}\r\n                />\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        )}\r\n\r\n        {/* Table for Desktop */}\r\n        {!isMobile && paginatedTransactions.length > 0 && (\r\n          <Paper elevation={2} sx={{ mx: 3, borderRadius: 4, overflow: 'hidden', boxShadow: '0 2px 10px rgba(0,0,0,0.08)' }}>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow sx={{ bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)' }}>\r\n                    <TableCell sx={{ fontWeight: 'bold' }}>Date</TableCell>\r\n                    <TableCell sx={{ fontWeight: 'bold' }}>Description</TableCell>\r\n                    <TableCell sx={{ fontWeight: 'bold' }}>Type</TableCell>\r\n                    <TableCell sx={{ fontWeight: 'bold' }}>Account</TableCell>\r\n                    <TableCell sx={{ fontWeight: 'bold' }}>Category</TableCell>\r\n                    <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>Amount (MYR)</TableCell>\r\n                    <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {paginatedTransactions.map((transaction) => (\r\n                    <TableRow \r\n                      key={transaction._id}\r\n                      hover\r\n                      sx={{ \r\n                        '&:hover': { \r\n                          bgcolor: theme.palette.action.hover,\r\n                          cursor: 'pointer'\r\n                        }\r\n                      }}\r\n                      onClick={() => handleViewClick(transaction)}\r\n                    >\r\n                      <TableCell>{formatDate(transaction.date)}</TableCell>\r\n                      <TableCell>{transaction.description}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          icon={getTypeIcon(transaction.type)}\r\n                          label={transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)} \r\n                          color={getTypeColor(transaction.type)}\r\n                          size=\"small\"\r\n                          sx={{ borderRadius: 8 }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={transaction.account.charAt(0).toUpperCase() + transaction.account.slice(1)} \r\n                          color={getAccountColor(transaction.account)}\r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          sx={{ borderRadius: 8 }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{transaction.category}</TableCell>\r\n                      <TableCell \r\n                        align=\"right\" \r\n                        sx={{ \r\n                          fontWeight: 'bold',\r\n                          color: transaction.type === 'expense' ? 'error.main' : \r\n                                transaction.type === 'income' ? 'success.main' : 'inherit'\r\n                        }}\r\n                      >\r\n                        {formatCurrency(transaction.amount)}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleViewClick(transaction);\r\n                          }}\r\n                          sx={{ mr: 0.5 }}\r\n                        >\r\n                          <VisibilityIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"secondary\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleEditClick(transaction);\r\n                          }}\r\n                          sx={{ mr: 0.5 }}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeleteClick(transaction);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              component=\"div\"\r\n              count={filteredTransactions.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n              onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        )}\r\n\r\n        {/* Floating Action Button for Mobile */}\r\n        {isMobile && (\r\n          <Fab\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            sx={{\r\n              position: 'fixed',\r\n              bottom: 72,\r\n              right: 16,\r\n              boxShadow: '0 4px 12px rgba(0,0,0,0.2)'\r\n            }}\r\n            onClick={handleAddClick}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        )}\r\n\r\n        {/* Add filter button for mobile */}\r\n        {isMobile && (\r\n          <Fab\r\n            size=\"small\"\r\n            color=\"secondary\"\r\n            aria-label=\"filter\"\r\n            sx={{\r\n              position: 'fixed',\r\n              bottom: 72,\r\n              left: 16,\r\n              boxShadow: '0 4px 12px rgba(0,0,0,0.2)'\r\n            }}\r\n            onClick={() => setFilterDrawerOpen(true)}\r\n          >\r\n            <FilterAltIcon />\r\n          </Fab>\r\n        )}\r\n\r\n        {/* Filter Drawer for Mobile */}\r\n        <SwipeableDrawer\r\n          anchor=\"bottom\"\r\n          open={filterDrawerOpen}\r\n          onClose={() => setFilterDrawerOpen(false)}\r\n          onOpen={() => setFilterDrawerOpen(true)}\r\n          PaperProps={{\r\n            sx: {\r\n              borderTopLeftRadius: 16,\r\n              borderTopRightRadius: 16,\r\n              maxHeight: '80vh'\r\n            }\r\n          }}\r\n          disableSwipeToOpen={false}\r\n          swipeAreaWidth={30}\r\n        >\r\n          <Box sx={{ width: '100%', height: 4, bgcolor: 'rgba(0,0,0,0.1)', mx: 'auto', mt: 1, borderRadius: 2 }} />\r\n          <Box sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>Filters</Typography>\r\n              <IconButton onClick={() => setFilterDrawerOpen(false)}>\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Box>\r\n            \r\n            <List disablePadding>\r\n              <ListItem>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel>Transaction Type</InputLabel>\r\n                  <Select\r\n                    value={filterType}\r\n                    onChange={(e) => setFilterType(e.target.value)}\r\n                    label=\"Transaction Type\"\r\n                    sx={{ borderRadius: 8 }}\r\n                  >\r\n                    <MenuItem value=\"all\">All Types</MenuItem>\r\n                    <MenuItem value=\"income\">Income</MenuItem>\r\n                    <MenuItem value=\"expense\">Expense</MenuItem>\r\n                    <MenuItem value=\"transfer\">Transfer</MenuItem>\r\n                    <MenuItem value=\"investment\">Investment</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </ListItem>\r\n              \r\n              <ListItem>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel>Account</InputLabel>\r\n                  <Select\r\n                    value={filterAccount}\r\n                    onChange={(e) => setFilterAccount(e.target.value)}\r\n                    label=\"Account\"\r\n                    sx={{ borderRadius: 8 }}\r\n                  >\r\n                    <MenuItem value=\"all\">All Accounts</MenuItem>\r\n                    <MenuItem value=\"main\">Main</MenuItem>\r\n                    <MenuItem value=\"savings\">Savings</MenuItem>\r\n                    <MenuItem value=\"investment\">Investment</MenuItem>\r\n                    <MenuItem value=\"petty-cash\">Petty Cash</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </ListItem>\r\n              \r\n              <ListItem>\r\n                <FormControl fullWidth sx={{ mb: 2 }}>\r\n                  <InputLabel>Date Range</InputLabel>\r\n                  <Select\r\n                    value={filterDateRange}\r\n                    onChange={(e) => setFilterDateRange(e.target.value)}\r\n                    label=\"Date Range\"\r\n                    sx={{ borderRadius: 8 }}\r\n                  >\r\n                    <MenuItem value=\"all\">All Time</MenuItem>\r\n                    <MenuItem value=\"thisMonth\">This Month</MenuItem>\r\n                    <MenuItem value=\"lastMonth\">Last Month</MenuItem>\r\n                    <MenuItem value=\"custom\">Custom Range</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </ListItem>\r\n              \r\n              {filterDateRange === 'custom' && (\r\n                <>\r\n                  <ListItem>\r\n                    <DatePicker\r\n                      label=\"Start Date\"\r\n                      value={filterStartDate}\r\n                      onChange={(newDate) => setFilterStartDate(newDate)}\r\n                      renderInput={(params) => \r\n                        <TextField \r\n                          {...params} \r\n                          fullWidth \r\n                          sx={{ mb: 2 }}\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            sx: { borderRadius: 8 }\r\n                          }}\r\n                        />\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                  \r\n                  <ListItem>\r\n                    <DatePicker\r\n                      label=\"End Date\"\r\n                      value={filterEndDate}\r\n                      onChange={(newDate) => setFilterEndDate(newDate)}\r\n                      renderInput={(params) => \r\n                        <TextField \r\n                          {...params} \r\n                          fullWidth\r\n                          InputProps={{\r\n                            ...params.InputProps,\r\n                            sx: { borderRadius: 8 }\r\n                          }}\r\n                        />\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                </>\r\n              )}\r\n            </List>\r\n            \r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => {\r\n                  setFilterType('all');\r\n                  setFilterAccount('all');\r\n                  setFilterCategory('all');\r\n                  setFilterDateRange('all');\r\n                  setSearchTerm('');\r\n                }}\r\n                sx={{ borderRadius: 8 }}\r\n              >\r\n                Clear All\r\n              </Button>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={() => setFilterDrawerOpen(false)}\r\n                sx={{ borderRadius: 8 }}\r\n              >\r\n                Apply Filters\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        </SwipeableDrawer>\r\n\r\n        {/* Add/Edit/View Transaction Dialog */}\r\n        <Dialog \r\n          open={openDialog} \r\n          onClose={handleDialogClose} \r\n          maxWidth=\"sm\" \r\n          fullWidth\r\n          fullScreen={isMobile}\r\n          TransitionComponent={Transition}\r\n          PaperProps={{\r\n            sx: {\r\n              borderRadius: isMobile ? 0 : 4,\r\n              overflow: 'hidden'\r\n            }\r\n          }}\r\n        >\r\n          <Box sx={{ \r\n            bgcolor: theme.palette.mode === 'dark' \r\n              ? `linear-gradient(135deg, ${theme.palette.primary.dark}, ${theme.palette.secondary.dark})` \r\n              : `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,\r\n            py: 2,\r\n            px: 3\r\n          }}>\r\n            <DialogTitle sx={{ p: 0, color: 'white', fontWeight: 'medium' }}>\r\n              {dialogMode === 'add'\r\n                ? 'Add New Transaction'\r\n                : dialogMode === 'edit'\r\n                ? 'Edit Transaction'\r\n                : 'Transaction Details'}\r\n            </DialogTitle>\r\n            {isMobile && (\r\n              <IconButton\r\n                edge=\"end\"\r\n                color=\"inherit\"\r\n                onClick={handleDialogClose}\r\n                sx={{ position: 'absolute', right: 8, top: 8 }}\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n            )}\r\n          </Box>\r\n          \r\n          <DialogContent sx={{ px: isMobile ? 2 : 3, py: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <FormControl fullWidth disabled={dialogMode === 'view'}>\r\n                  <InputLabel>Type</InputLabel>\r\n                  <Select\r\n                    name=\"type\"\r\n                    value={formData.type}\r\n                    onChange={handleInputChange}\r\n                    label=\"Type\"\r\n                    sx={{ borderRadius: 8 }}\r\n                    startAdornment={\r\n                      <InputAdornment position=\"start\">\r\n                        {getTypeIcon(formData.type)}\r\n                      </InputAdornment>\r\n                    }\r\n                  >\r\n                    <MenuItem value=\"income\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <IncomeIcon sx={{ mr: 1, color: theme.palette.success.main }} />\r\n                        Income\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"expense\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <ExpenseIcon sx={{ mr: 1, color: theme.palette.error.main }} />\r\n                        Expense\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"transfer\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <TransferIcon sx={{ mr: 1, color: theme.palette.info.main }} />\r\n                        Transfer\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"investment\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AccountBalanceIcon sx={{ mr: 1, color: theme.palette.warning.main }} />\r\n                        Investment\r\n                      </Box>\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} sm={6}>\r\n                <FormControl fullWidth disabled={dialogMode === 'view'}>\r\n                  <InputLabel>Account</InputLabel>\r\n                  <Select\r\n                    name=\"account\"\r\n                    value={formData.account}\r\n                    onChange={handleInputChange}\r\n                    label=\"Account\"\r\n                    sx={{ borderRadius: 8 }}\r\n                    startAdornment={\r\n                      <InputAdornment position=\"start\">\r\n                        {getAccountIcon(formData.account)}\r\n                      </InputAdornment>\r\n                    }\r\n                  >\r\n                    <MenuItem value=\"main\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <WalletIcon sx={{ mr: 1, color: theme.palette.primary.main }} />\r\n                        Main\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"savings\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AccountBalanceIcon sx={{ mr: 1, color: theme.palette.success.main }} />\r\n                        Savings\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"investment\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <AccountBalanceIcon sx={{ mr: 1, color: theme.palette.warning.main }} />\r\n                        Investment\r\n                      </Box>\r\n                    </MenuItem>\r\n                    <MenuItem value=\"petty-cash\">\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <PaymentIcon sx={{ mr: 1, color: theme.palette.secondary.main }} />\r\n                        Petty Cash\r\n                      </Box>\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={handleInputChange}\r\n                  disabled={dialogMode === 'view'}\r\n                  required\r\n                  sx={{ \r\n                    '& .MuiOutlinedInput-root': {\r\n                      borderRadius: 4\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Amount\"\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  value={formData.amount}\r\n                  onChange={handleInputChange}\r\n                  disabled={dialogMode === 'view'}\r\n                  required\r\n                  inputProps={{ min: 0, step: 0.01 }}\r\n                  InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">RM</InputAdornment>,\r\n                    sx: { borderRadius: 4 }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} sm={6}>\r\n                <DatePicker\r\n                  label=\"Date\"\r\n                  value={formData.date}\r\n                  onChange={handleDateChange}\r\n                  disabled={dialogMode === 'view'}\r\n                  renderInput={(params) => \r\n                    <TextField \r\n                      {...params} \r\n                      fullWidth\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        sx: { borderRadius: 4 }\r\n                      }}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              \r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth disabled={dialogMode === 'view'}>\r\n                  <InputLabel>Category</InputLabel>\r\n                  <Select\r\n                    name=\"category\"\r\n                    value={formData.category}\r\n                    onChange={handleInputChange}\r\n                    label=\"Category\"\r\n                    sx={{ borderRadius: 4 }}\r\n                  >\r\n                    {getCategoryOptions().map((category) => (\r\n                      <MenuItem key={category} value={category}>\r\n                        {category}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              \r\n              {/* Display asset checkbox only for relevant expense categories */}\r\n              {formData.type === 'expense' && canBeAsset(formData.category) && (\r\n                <Grid item xs={12}>\r\n                  <Paper \r\n                    elevation={0} \r\n                    sx={{ \r\n                      p: 2, \r\n                      borderRadius: 4, \r\n                      bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)'\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={formData.isAsset}\r\n                          onChange={handleAssetToggle}\r\n                          name=\"isAsset\"\r\n                          color=\"primary\"\r\n                          disabled={dialogMode === 'view'}\r\n                        />\r\n                      }\r\n                      label=\"Record as an asset (for items that have long-term value)\"\r\n                    />\r\n                  </Paper>\r\n                </Grid>\r\n              )}\r\n              \r\n              {/* Asset-specific fields when isAsset is true */}\r\n              {formData.type === 'expense' && formData.isAsset && (\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Depreciation Rate (%)\"\r\n                    name=\"assetDepreciationRate\"\r\n                    type=\"number\"\r\n                    value={formData.assetDepreciationRate}\r\n                    onChange={handleInputChange}\r\n                    disabled={dialogMode === 'view'}\r\n                    inputProps={{ min: 0, max: 100, step: 0.1 }}\r\n                    helperText=\"Annual depreciation rate (0-100%)\"\r\n                    InputProps={{\r\n                      sx: { borderRadius: 4 }\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              )}\r\n              \r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Notes\"\r\n                  name=\"notes\"\r\n                  value={formData.notes}\r\n                  onChange={handleInputChange}\r\n                  disabled={dialogMode === 'view'}\r\n                  multiline\r\n                  rows={3}\r\n                  InputProps={{\r\n                    sx: { borderRadius: 4 }\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {dialogMode === 'view' && (\r\n                <Grid item xs={12}>\r\n                  <Box sx={{ \r\n                    mt: 2,\r\n                    p: 2,\r\n                    borderRadius: 2,\r\n                    bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)'\r\n                  }}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                      Created: {formatDate(currentTransaction?.createdAt || new Date())}\r\n                    </Typography>\r\n                    {currentTransaction?.updatedAt && currentTransaction.updatedAt !== currentTransaction.createdAt && (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Last Updated: {formatDate(currentTransaction.updatedAt)}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </DialogContent>\r\n          \r\n          <DialogActions sx={{ px: 3, pb: 3 }}>\r\n            <Button \r\n              onClick={handleDialogClose} \r\n              color=\"primary\"\r\n              sx={{ borderRadius: 8 }}\r\n            >\r\n              {dialogMode === 'view' ? 'Close' : 'Cancel'}\r\n            </Button>\r\n            {dialogMode !== 'view' && (\r\n              <Button\r\n                onClick={handleSubmit}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={!formData.description || !formData.amount || !formData.category}\r\n                startIcon={dialogMode === 'add' ? <AddIcon /> : <SaveIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              >\r\n                {dialogMode === 'add' ? 'Add' : 'Save'}\r\n              </Button>\r\n            )}\r\n            {dialogMode === 'view' && (\r\n              <Button\r\n                onClick={() => {\r\n                  handleDialogClose();\r\n                  handleEditClick(currentTransaction);\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                startIcon={<EditIcon />}\r\n                sx={{ borderRadius: 8 }}\r\n              >\r\n                Edit\r\n              </Button>\r\n            )}\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        {/* Delete Confirmation Dialog */}\r\n        <Dialog \r\n          open={openDeleteDialog} \r\n          onClose={handleDeleteDialogClose}\r\n          PaperProps={{\r\n            sx: {\r\n              borderRadius: 4,\r\n              overflow: 'hidden'\r\n            }\r\n          }}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <DialogTitle sx={{ \r\n            bgcolor: theme.palette.error.light, \r\n            color: theme.palette.error.contrastText,\r\n            fontWeight: 'medium'\r\n          }}>\r\n            Confirm Delete\r\n          </DialogTitle>\r\n          <DialogContent sx={{ py: 3 }}>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n              Are you sure you want to delete this transaction?\r\n            </Typography>\r\n            {transactionToDelete && (\r\n              <Paper \r\n                elevation={0}\r\n                sx={{ \r\n                  p: 2, \r\n                  mt: 2, \r\n                  bgcolor: theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.02)',\r\n                  borderRadius: 2\r\n                }}\r\n              >\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Description:</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={8}>\r\n                    <Typography variant=\"body2\">{transactionToDelete.description}</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Amount:</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={8}>\r\n                    <Typography variant=\"body2\" sx={{ \r\n                      fontWeight: 'bold',\r\n                      color: transactionToDelete.type === 'expense' ? 'error.main' : \r\n                            transactionToDelete.type === 'income' ? 'success.main' : 'inherit'\r\n                    }}>\r\n                      {formatCurrency(transactionToDelete.amount)}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Date:</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={8}>\r\n                    <Typography variant=\"body2\">{formatDate(transactionToDelete.date)}</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">Type:</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={8}>\r\n                    <Chip \r\n                      label={transactionToDelete.type}\r\n                      size=\"small\"\r\n                      color={getTypeColor(transactionToDelete.type)}\r\n                      sx={{ borderRadius: 8 }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions sx={{ px: 3, pb: 3 }}>\r\n            <Button \r\n              onClick={handleDeleteDialogClose} \r\n              startIcon={<CloseIcon />}\r\n              sx={{ borderRadius: 8 }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleDeleteConfirm}\r\n              color=\"error\"\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              sx={{ borderRadius: 8 }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n} ","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4 10h3v7H4zm6.5 0h3v7h-3zM2 19h20v3H2zm15-9h3v7h-3zm-5-9L2 6v2h20V6z\"\n}), 'AccountBalance');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8z\"\n}), 'ArrowDownward');"],"names":["createSvgIcon","_jsx","d","Transition","React","props","ref","Slide","direction","Transactions","transactions","setTransactions","useState","loading","setLoading","error","setError","page","setPage","rowsPerPage","setRowsPerPage","openDialog","setOpenDialog","dialogMode","setDialogMode","currentTransaction","setCurrentTransaction","formData","setFormData","type","amount","description","category","date","Date","account","notes","isAsset","assetDepreciationRate","openDeleteDialog","setOpenDeleteDialog","transactionToDelete","setTransactionToDelete","searchTerm","setSearchTerm","filterType","setFilterType","filterAccount","setFilterAccount","filterCategory","setFilterCategory","filterDateRange","setFilterDateRange","filterStartDate","setFilterStartDate","dirtyDate","dirtyAmount","requiredArgs","arguments","toInteger","addDays","subDays","filterEndDate","setFilterEndDate","filterDrawerOpen","setFilterDrawerOpen","tabValue","setTabValue","sortBy","setSortBy","sortDirection","setSortDirection","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","between","useEffect","loadTransactions","async","res","axios","get","data","err","console","handleAddClick","handleEditClick","transaction","handleViewClick","handleDialogClose","handleInputChange","e","name","value","target","prevState","handleDeleteClick","handleDeleteDialogClose","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","formatDate","dateString","format","formatCurrency","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","getTypeIcon","IncomeIcon","sx","color","palette","success","main","ExpenseIcon","TransferIcon","info","AccountBalanceIcon","warning","MoneyIcon","getTypeColor","getAccountColor","_jsxs","Box","display","flexDirection","alignItems","justifyContent","height","p","children","CircularProgress","size","thickness","mb","primary","Typography","variant","align","mt","maxWidth","Paper","elevation","borderRadius","bgcolor","Avatar","mr","CloseIcon","Button","onClick","startIcon","RefreshIcon","filteredTransactions","filter","matchesSearch","toLowerCase","includes","matchesType","matchesAccount","matchesCategory","matchesDateRange","transactionDate","thisMonthStart","startOfMonth","thisMonthEnd","endOfMonth","isWithinInterval","start","end","lastMonth","setMonth","getMonth","lastMonthStart","lastMonthEnd","sortedTransactions","sort","a","b","dateA","dateB","descA","descB","localeCompare","sortTransactions","paginatedTransactions","slice","summary","calculateSummary","thisMonth","totalIncome","totalExpense","totalTransfer","totalInvestment","thisMonthIncome","thisMonthExpense","accountBalances","savings","investment","forEach","parseFloat","isThisMonth","LocalizationProvider","dateAdapter","AdapterDateFns","pb","pt","px","background","mode","dark","secondary","boxShadow","fontWeight","AddIcon","py","Grid","container","spacing","item","xs","md","backdropFilter","cursor","transition","transform","CalendarIcon","overflow","width","fontSize","Divider","my","TextField","placeholder","onChange","fullWidth","InputProps","startAdornment","InputAdornment","position","SearchIcon","FilterAltIcon","ml","whiteSpace","borderColor","SortIcon","flexWrap","gap","Chip","label","icon","Tabs","newValue","backgroundColor","Tab","textTransform","length","minHeight","gutterBottom","map","Card","CardContent","light","text","IconButton","stopPropagation","EditIcon","DeleteIcon","_id","TablePagination","component","count","onPageChange","onRowsPerPageChange","labelRowsPerPage","rowsPerPageOptions","mx","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","hover","action","charAt","toUpperCase","VisibilityIcon","Fab","bottom","right","left","SwipeableDrawer","anchor","open","onClose","onOpen","PaperProps","borderTopLeftRadius","borderTopRightRadius","maxHeight","disableSwipeToOpen","swipeAreaWidth","List","disablePadding","ListItem","FormControl","InputLabel","Select","MenuItem","_Fragment","DatePicker","newDate","renderInput","params","Dialog","fullScreen","TransitionComponent","DialogTitle","edge","top","DialogContent","sm","disabled","PaymentIcon","WalletIcon","getAccountIcon","required","inputProps","min","step","FormControlLabel","control","Checkbox","checked","max","helperText","multiline","rows","createdAt","updatedAt","DialogActions","post","prevTransactions","put","t","SaveIcon","contrastText","delete"],"sourceRoot":""}